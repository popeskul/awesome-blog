// Code generated by MockGen. DO NOT EDIT.
// Source: hash_service.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_hash_service.go -package=mockshash -source=hash_service.go github.com/popeskul/awesome-blog/backend/internal/domain/repository HashService
//

// Package mockshash is a generated GoMock package.
package mockshash

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHashService is a mock of HashService interface.
type MockHashService struct {
	ctrl     *gomock.Controller
	recorder *MockHashServiceMockRecorder
}

// MockHashServiceMockRecorder is the mock recorder for MockHashService.
type MockHashServiceMockRecorder struct {
	mock *MockHashService
}

// NewMockHashService creates a new mock instance.
func NewMockHashService(ctrl *gomock.Controller) *MockHashService {
	mock := &MockHashService{ctrl: ctrl}
	mock.recorder = &MockHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashService) EXPECT() *MockHashServiceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockHashService) ComparePassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockHashServiceMockRecorder) ComparePassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockHashService)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockHashService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHashServiceMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHashService)(nil).HashPassword), password)
}
