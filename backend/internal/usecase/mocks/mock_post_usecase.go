// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-blog/backend/internal/usecase (interfaces: UseCasePost)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_post_usecase.go -package=mockusecase github.com/popeskul/awesome-blog/backend/internal/usecase UseCasePost
//

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/popeskul/awesome-blog/backend/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCasePost is a mock of UseCasePost interface.
type MockUseCasePost struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasePostMockRecorder
}

// MockUseCasePostMockRecorder is the mock recorder for MockUseCasePost.
type MockUseCasePostMockRecorder struct {
	mock *MockUseCasePost
}

// NewMockUseCasePost creates a new mock instance.
func NewMockUseCasePost(ctrl *gomock.Controller) *MockUseCasePost {
	mock := &MockUseCasePost{ctrl: ctrl}
	mock.recorder = &MockUseCasePostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCasePost) EXPECT() *MockUseCasePostMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockUseCasePost) CreatePost(arg0 context.Context, arg1 *entity.NewPost) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockUseCasePostMockRecorder) CreatePost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockUseCasePost)(nil).CreatePost), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockUseCasePost) DeletePost(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockUseCasePostMockRecorder) DeletePost(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockUseCasePost)(nil).DeletePost), arg0, arg1, arg2)
}

// GetAllPosts mocks base method.
func (m *MockUseCasePost) GetAllPosts(arg0 context.Context, arg1 *entity.Pagination) (*entity.PostList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", arg0, arg1)
	ret0, _ := ret[0].(*entity.PostList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockUseCasePostMockRecorder) GetAllPosts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockUseCasePost)(nil).GetAllPosts), arg0, arg1)
}

// GetPost mocks base method.
func (m *MockUseCasePost) GetPost(arg0 context.Context, arg1 uuid.UUID) (*entity.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*entity.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockUseCasePostMockRecorder) GetPost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockUseCasePost)(nil).GetPost), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockUseCasePost) UpdatePost(arg0 context.Context, arg1 *entity.Post, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockUseCasePostMockRecorder) UpdatePost(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockUseCasePost)(nil).UpdatePost), arg0, arg1, arg2)
}
