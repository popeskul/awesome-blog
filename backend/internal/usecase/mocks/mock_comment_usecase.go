// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-blog/backend/internal/usecase (interfaces: UseCaseComment)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_comment_usecase.go -package=mockusecase github.com/popeskul/awesome-blog/backend/internal/usecase UseCaseComment
//

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/popeskul/awesome-blog/backend/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCaseComment is a mock of UseCaseComment interface.
type MockUseCaseComment struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseCommentMockRecorder
}

// MockUseCaseCommentMockRecorder is the mock recorder for MockUseCaseComment.
type MockUseCaseCommentMockRecorder struct {
	mock *MockUseCaseComment
}

// NewMockUseCaseComment creates a new mock instance.
func NewMockUseCaseComment(ctrl *gomock.Controller) *MockUseCaseComment {
	mock := &MockUseCaseComment{ctrl: ctrl}
	mock.recorder = &MockUseCaseCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseComment) EXPECT() *MockUseCaseCommentMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockUseCaseComment) CreateComment(arg0 context.Context, arg1 *entity.NewComment) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockUseCaseCommentMockRecorder) CreateComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockUseCaseComment)(nil).CreateComment), arg0, arg1)
}

// DeleteComment mocks base method.
func (m *MockUseCaseComment) DeleteComment(arg0 context.Context, arg1, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockUseCaseCommentMockRecorder) DeleteComment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockUseCaseComment)(nil).DeleteComment), arg0, arg1, arg2)
}

// GetCommentByID mocks base method.
func (m *MockUseCaseComment) GetCommentByID(arg0 context.Context, arg1 uuid.UUID) (*entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockUseCaseCommentMockRecorder) GetCommentByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockUseCaseComment)(nil).GetCommentByID), arg0, arg1)
}

// GetComments mocks base method.
func (m *MockUseCaseComment) GetComments(arg0 context.Context, arg1 uuid.UUID, arg2 *entity.Pagination) (*entity.CommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.CommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockUseCaseCommentMockRecorder) GetComments(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockUseCaseComment)(nil).GetComments), arg0, arg1, arg2)
}

// UpdateComment mocks base method.
func (m *MockUseCaseComment) UpdateComment(arg0 context.Context, arg1 *entity.UpdateComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockUseCaseCommentMockRecorder) UpdateComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockUseCaseComment)(nil).UpdateComment), arg0, arg1)
}
