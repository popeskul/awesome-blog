// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-blog/backend/internal/usecase (interfaces: UseCaseUser)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_user_usecase.go -package=mockusecase github.com/popeskul/awesome-blog/backend/internal/usecase UseCaseUser
//

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/popeskul/awesome-blog/backend/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCaseUser is a mock of UseCaseUser interface.
type MockUseCaseUser struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseUserMockRecorder
}

// MockUseCaseUserMockRecorder is the mock recorder for MockUseCaseUser.
type MockUseCaseUserMockRecorder struct {
	mock *MockUseCaseUser
}

// NewMockUseCaseUser creates a new mock instance.
func NewMockUseCaseUser(ctrl *gomock.Controller) *MockUseCaseUser {
	mock := &MockUseCaseUser{ctrl: ctrl}
	mock.recorder = &MockUseCaseUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseUser) EXPECT() *MockUseCaseUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUseCaseUser) CreateUser(arg0 context.Context, arg1 *entity.NewUser) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUseCaseUserMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUseCaseUser)(nil).CreateUser), arg0, arg1)
}

// DeleteUserByID mocks base method.
func (m *MockUseCaseUser) DeleteUserByID(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUseCaseUserMockRecorder) DeleteUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUseCaseUser)(nil).DeleteUserByID), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockUseCaseUser) GetAllUsers(arg0 context.Context, arg1 *entity.Pagination) (*entity.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].(*entity.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUseCaseUserMockRecorder) GetAllUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUseCaseUser)(nil).GetAllUsers), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockUseCaseUser) GetUserByID(arg0 context.Context, arg1 uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUseCaseUserMockRecorder) GetUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUseCaseUser)(nil).GetUserByID), arg0, arg1)
}

// UpdateUserByID mocks base method.
func (m *MockUseCaseUser) UpdateUserByID(arg0 context.Context, arg1 uuid.UUID, arg2 *entity.UpdateUser) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockUseCaseUserMockRecorder) UpdateUserByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockUseCaseUser)(nil).UpdateUserByID), arg0, arg1, arg2)
}
