// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/popeskul/awesome-blog/backend/internal/usecase (interfaces: UseCaseAuth)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_auth_usecase.go -package=mockusecase github.com/popeskul/awesome-blog/backend/internal/usecase UseCaseAuth
//

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/popeskul/awesome-blog/backend/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCaseAuth is a mock of UseCaseAuth interface.
type MockUseCaseAuth struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseAuthMockRecorder
}

// MockUseCaseAuthMockRecorder is the mock recorder for MockUseCaseAuth.
type MockUseCaseAuthMockRecorder struct {
	mock *MockUseCaseAuth
}

// NewMockUseCaseAuth creates a new mock instance.
func NewMockUseCaseAuth(ctrl *gomock.Controller) *MockUseCaseAuth {
	mock := &MockUseCaseAuth{ctrl: ctrl}
	mock.recorder = &MockUseCaseAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseAuth) EXPECT() *MockUseCaseAuthMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockUseCaseAuth) Authenticate(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockUseCaseAuthMockRecorder) Authenticate(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockUseCaseAuth)(nil).Authenticate), arg0, arg1, arg2)
}

// Register mocks base method.
func (m *MockUseCaseAuth) Register(arg0 context.Context, arg1 entity.NewUser) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUseCaseAuthMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUseCaseAuth)(nil).Register), arg0, arg1)
}
