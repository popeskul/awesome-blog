// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for GetApiV1PostsParamsSort.
const (
	GetApiV1PostsParamsSortCreatedAtAsc  GetApiV1PostsParamsSort = "created_at_asc"
	GetApiV1PostsParamsSortCreatedAtDesc GetApiV1PostsParamsSort = "created_at_desc"
	GetApiV1PostsParamsSortTitleAsc      GetApiV1PostsParamsSort = "title_asc"
	GetApiV1PostsParamsSortTitleDesc     GetApiV1PostsParamsSort = "title_desc"
)

// Defines values for GetApiV1PostsPostIdCommentsParamsSort.
const (
	GetApiV1PostsPostIdCommentsParamsSortCreatedAtAsc  GetApiV1PostsPostIdCommentsParamsSort = "created_at_asc"
	GetApiV1PostsPostIdCommentsParamsSortCreatedAtDesc GetApiV1PostsPostIdCommentsParamsSort = "created_at_desc"
)

// Defines values for GetApiV1UsersParamsSort.
const (
	CreatedAtAsc  GetApiV1UsersParamsSort = "created_at_asc"
	CreatedAtDesc GetApiV1UsersParamsSort = "created_at_desc"
	UsernameAsc   GetApiV1UsersParamsSort = "username_asc"
	UsernameDesc  GetApiV1UsersParamsSort = "username_desc"
)

// Comment defines model for Comment.
type Comment struct {
	AuthorId  openapi_types.UUID `json:"authorId"`
	Content   string             `json:"content"`
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	PostId    openapi_types.UUID `json:"postId"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// NewComment defines model for NewComment.
type NewComment struct {
	AuthorId openapi_types.UUID `json:"authorId"`
	Content  string             `json:"content"`
	PostId   openapi_types.UUID `json:"postId"`
}

// NewPost defines model for NewPost.
type NewPost struct {
	AuthorId openapi_types.UUID `json:"authorId"`
	Content  string             `json:"content"`
	Title    string             `json:"title"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// Limit Number of items per page
	Limit int `json:"limit"`

	// Offset Number of items to skip before starting to collect the result set
	Offset int `json:"offset"`

	// Page Current page number
	Page int `json:"page"`

	// Sort Sorting order
	Sort string `json:"sort"`

	// Total Total number of items
	Total int `json:"total"`
}

// Post defines model for Post.
type Post struct {
	AuthorId  openapi_types.UUID `json:"authorId"`
	Content   string             `json:"content"`
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Title     string             `json:"title"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// UpdatePost defines model for UpdatePost.
type UpdatePost struct {
	Content *string `json:"content,omitempty"`
	Title   *string `json:"title,omitempty"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
	Username *string              `json:"username,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time           `json:"createdAt"`
	Email     openapi_types.Email `json:"email"`
	Id        openapi_types.UUID  `json:"id"`
	UpdatedAt time.Time           `json:"updatedAt"`
	Username  string              `json:"username"`
}

// GetApiV1PostsParams defines parameters for GetApiV1Posts.
type GetApiV1PostsParams struct {
	Page   *int                     `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int                     `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int                     `form:"offset,omitempty" json:"offset,omitempty"`
	Sort   *GetApiV1PostsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetApiV1PostsParamsSort defines parameters for GetApiV1Posts.
type GetApiV1PostsParamsSort string

// GetApiV1PostsPostIdCommentsParams defines parameters for GetApiV1PostsPostIdComments.
type GetApiV1PostsPostIdCommentsParams struct {
	Page   *int `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sorting order for comments
	Sort *GetApiV1PostsPostIdCommentsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetApiV1PostsPostIdCommentsParamsSort defines parameters for GetApiV1PostsPostIdComments.
type GetApiV1PostsPostIdCommentsParamsSort string

// GetApiV1UsersParams defines parameters for GetApiV1Users.
type GetApiV1UsersParams struct {
	Page   *int                     `form:"page,omitempty" json:"page,omitempty"`
	Limit  *int                     `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int                     `form:"offset,omitempty" json:"offset,omitempty"`
	Sort   *GetApiV1UsersParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetApiV1UsersParamsSort defines parameters for GetApiV1Users.
type GetApiV1UsersParamsSort string

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostApiV1PostsJSONRequestBody defines body for PostApiV1Posts for application/json ContentType.
type PostApiV1PostsJSONRequestBody = NewPost

// PutApiV1PostsPostIdJSONRequestBody defines body for PutApiV1PostsPostId for application/json ContentType.
type PutApiV1PostsPostIdJSONRequestBody = UpdatePost

// PostApiV1PostsPostIdCommentsJSONRequestBody defines body for PostApiV1PostsPostIdComments for application/json ContentType.
type PostApiV1PostsPostIdCommentsJSONRequestBody = NewComment

// PutApiV1UsersUserIdJSONRequestBody defines body for PutApiV1UsersUserId for application/json ContentType.
type PutApiV1UsersUserIdJSONRequestBody = UpdateUser

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = NewUser

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all posts
	// (GET /api/v1/posts)
	GetApiV1Posts(w http.ResponseWriter, r *http.Request, params GetApiV1PostsParams)
	// Create a new post
	// (POST /api/v1/posts)
	PostApiV1Posts(w http.ResponseWriter, r *http.Request)
	// Delete a post
	// (DELETE /api/v1/posts/{postId})
	DeleteApiV1PostsPostId(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Get a specific post
	// (GET /api/v1/posts/{postId})
	GetApiV1PostsPostId(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Update a post
	// (PUT /api/v1/posts/{postId})
	PutApiV1PostsPostId(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Get comments for a specific post
	// (GET /api/v1/posts/{postId}/comments)
	GetApiV1PostsPostIdComments(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, params GetApiV1PostsPostIdCommentsParams)
	// Add a comment to a post
	// (POST /api/v1/posts/{postId}/comments)
	PostApiV1PostsPostIdComments(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID)
	// Get all users
	// (GET /api/v1/users)
	GetApiV1Users(w http.ResponseWriter, r *http.Request, params GetApiV1UsersParams)
	// Delete a user
	// (DELETE /api/v1/users/{userId})
	DeleteApiV1UsersUserId(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get a specific user
	// (GET /api/v1/users/{userId})
	GetApiV1UsersUserId(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update a user
	// (PUT /api/v1/users/{userId})
	PutApiV1UsersUserId(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Login
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Logout user
	// (POST /auth/logout)
	PostAuthLogout(w http.ResponseWriter, r *http.Request)
	// Get current user
	// (GET /auth/me)
	GetAuthMe(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all posts
// (GET /api/v1/posts)
func (_ Unimplemented) GetApiV1Posts(w http.ResponseWriter, r *http.Request, params GetApiV1PostsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new post
// (POST /api/v1/posts)
func (_ Unimplemented) PostApiV1Posts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a post
// (DELETE /api/v1/posts/{postId})
func (_ Unimplemented) DeleteApiV1PostsPostId(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a specific post
// (GET /api/v1/posts/{postId})
func (_ Unimplemented) GetApiV1PostsPostId(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a post
// (PUT /api/v1/posts/{postId})
func (_ Unimplemented) PutApiV1PostsPostId(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get comments for a specific post
// (GET /api/v1/posts/{postId}/comments)
func (_ Unimplemented) GetApiV1PostsPostIdComments(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID, params GetApiV1PostsPostIdCommentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a comment to a post
// (POST /api/v1/posts/{postId}/comments)
func (_ Unimplemented) PostApiV1PostsPostIdComments(w http.ResponseWriter, r *http.Request, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /api/v1/users)
func (_ Unimplemented) GetApiV1Users(w http.ResponseWriter, r *http.Request, params GetApiV1UsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a user
// (DELETE /api/v1/users/{userId})
func (_ Unimplemented) DeleteApiV1UsersUserId(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a specific user
// (GET /api/v1/users/{userId})
func (_ Unimplemented) GetApiV1UsersUserId(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a user
// (PUT /api/v1/users/{userId})
func (_ Unimplemented) PutApiV1UsersUserId(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Login
// (POST /auth/login)
func (_ Unimplemented) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Logout user
// (POST /auth/logout)
func (_ Unimplemented) PostAuthLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user
// (GET /auth/me)
func (_ Unimplemented) GetAuthMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register a new user
// (POST /auth/register)
func (_ Unimplemented) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiV1Posts operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Posts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1PostsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Posts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1Posts operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Posts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Posts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1PostsPostId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1PostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1PostsPostId(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1PostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1PostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1PostsPostId(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1PostsPostId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1PostsPostId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1PostsPostId(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1PostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1PostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1PostsPostIdCommentsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1PostsPostIdComments(w, r, postId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1PostsPostIdComments operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1PostsPostIdComments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1PostsPostIdComments(w, r, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Users operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Users(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1UsersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Users(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1UsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1UsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1UsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1UsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1UsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1UsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1UsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1UsersUserId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1UsersUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAuthMe operation middleware
func (siw *ServerInterfaceWrapper) GetAuthMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAuthMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/posts", wrapper.GetApiV1Posts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/posts", wrapper.PostApiV1Posts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/posts/{postId}", wrapper.DeleteApiV1PostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/posts/{postId}", wrapper.GetApiV1PostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/posts/{postId}", wrapper.PutApiV1PostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/posts/{postId}/comments", wrapper.GetApiV1PostsPostIdComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/posts/{postId}/comments", wrapper.PostApiV1PostsPostIdComments)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users", wrapper.GetApiV1Users)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/users/{userId}", wrapper.DeleteApiV1UsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.GetApiV1UsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/users/{userId}", wrapper.PutApiV1UsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/me", wrapper.GetAuthMe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
